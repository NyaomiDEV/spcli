#!/bin/bash

which jq >/dev/null 2&>1 && echo "Please install \`jq\` in your system!" && exit 1

config="${XDG_CONFIG_HOME:-~/.config}/spcli.conf"
cachedir="${XDG_CACHE_HOME:-~/.cache}/spcli"

if [ ! -f "$config" ]; then
	echo "Config file does not exist!"
	exit 1
fi

source "$config"

#
# cURL
#

function req_get(){
	curl --fail -sL -H "Authorization: ${TOKEN}" "https://api.apparyllis.com/v1/${1}"
	if [ $? -ne 0 ]; then
		echo "GET request to ${1} failed."
		exit 1
	fi
}

function req_post(){
	curl --fail -sL -X POST -H "Authorization: ${TOKEN}" -H "Content-Type: application/json" "https://api.apparyllis.com/v1/${1}" --data-raw "${2}"
	if [ $? -ne 0 ]; then
		echo "POST request to ${1} with data '${2}' failed."
		exit 1
	fi
}

function req_patch(){
	curl --fail -sL -X PATCH -H "Authorization: ${TOKEN}" -H "Content-Type: application/json" "https://api.apparyllis.com/v1/${1}" --data-raw "${2}"
	if [ $? -ne 0 ]; then
		echo "PATCH request to ${1} with data '${2}' failed."
		exit 1
	fi
}

#
# API
#

function getFriendFronters(){
	local _user=$(getUser "$1")
	local _fronting=$(req_get "friend/$1/getFront")
	local _userName=$(jq -r ".content.username" <<< "$_user")

	local _members=$(getMembers "$1")
	local _customFronts=$(getCustomFronts "$1")

	echo "Currently fronting at $_userName:"

	while read -r fronter; do
		local name=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$_members")
		local color=$(jq -r ".[] | select(.id == \"$fronter\") | .content.color" <<< "$_members")

		if [ -z "$name" ]; then
			name=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$_customFronts")
			color=$(jq -r ".[] | select(.id == \"$fronter\") | .content.color" <<< "$_customFronts")
		fi

		local status=$(jq -r ".statuses[\"$fronter\"]" <<< "$_fronting")

		if [ "$status" = "null" ]; then
			echo "$(hexColor $color)${name}$(resetColor)"
		else
			echo "$(hexColor $color)${name}$(resetColor): ${status}"
		fi
	done < <(jq -r ".fronters[]" <<< "$_fronting")
}

function getFronting(){
	local _me=$(getMe | jq -r ".id")
	local _fronting=$(req_get "fronters")
	local _members=$(getMembers "$_me")
	local _customFronts=$(getCustomFronts "$_me")

	echo "Currently fronting:"

	while read -r fronter; do
		local name=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$_members")
		local color=$(jq -r ".[] | select(.id == \"$fronter\") | .content.color" <<< "$_members")

		if [ -z "$name" ]; then
			name=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$_customFronts")
			color=$(jq -r ".[] | select(.id == \"$fronter\") | .content.color" <<< "$_customFronts")
		fi

		local status=$(jq -r ".[] | select(.content.member == \"$fronter\") | .content.customStatus" <<< "$_fronting")
		local date=$(jq -r ".[] | select(.content.member == \"$fronter\") | .content.startTime | . / 1000 | floor" <<< "$_fronting")
		local relativeDate=$(getRelativeDate "$date")

		if [ "$status" = "null" ]; then
			echo "$(hexColor $color)${name}$(resetColor) - ${relativeDate} ($(date +"%c" -f - <<< "@$date"))"
		else
			echo "$(hexColor $color)${name}$(resetColor): ${status} - ${relativeDate} ($(date +"%c" -f - <<< "@$date"))"
		fi
	done < <(jq -r ".[] | .content.member" <<< "$_fronting")
}

function addFront(){
	local _me=$(getMe | jq -r ".id")
	local _member="$1"
	local _memberName=$(jq -r ".[] | select(.id == \"$_member\") | .content.name" <<< "$(getMembers "$_me")")
	[ -z "$_memberName" ] && _memberName=$(jq -r ".[] | select(.id == \"$_member\") | .content.name" <<< "$(getCustomFronts "$_me")")
	local _starttime=$(date +%s%3N)

	local result=$(req_post "frontHistory/" "{\"custom\":false,\"startTime\":$_starttime,\"member\":\"$_member\",\"live\":true}" | jq -r .)

	echo "Added $_memberName to front. Fronting History ID: $result"
}

function removeFront(){
	local _me=$(getMe | jq -r ".id")
	local _member="$1"
	local _memberName=$(jq -r ".[] | select(.id == \"$_member\") | .content.name" <<< "$(getMembers "$_me")")
	[ -z "$_memberName" ] && _memberName=$(jq -r ".[] | select(.id == \"$_member\") | .content.name" <<< "$(getCustomFronts "$_me")")
	local _endtime=$(date +%s%3N)
	local _docId=$(req_get "frontHistory/member/$_member" | jq -r ".[] | select(.content.member == \"$_member\" and .content.live == true) | .id")

	local result=$(req_patch "frontHistory/$_docId" "{\"live\":false,\"endTime\":$_endtime,\"member\":\"$_member\"}")

	echo "Removed $_memberName from front."
}

function setFront(){
	local _fronting=$(req_get "fronters")
	while read -r fronter; do
		removeFront "$fronter"
	done < <(jq -r ".[] | .content.member" <<< "$_fronting")
	addFront "$1"
}

function setCustomStatus(){
	local _me=$(getMe | jq -r ".id")
	local _member="$1"
	local _memberName=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$(getMembers "$_me")")
	[ -z "$_memberName" ] && _memberName=$(jq -r ".[] | select(.id == \"$fronter\") | .content.name" <<< "$(getCustomFronts "$_me")")
	local _customStatus="$2"
	local _docId=$(req_get "frontHistory/member/$_member" | jq -r ".[] | select(.content.member == \"$_member\" and .content.live == true) | .id")

	local result=$(req_patch "frontHistory/$_docId" "{\"member\":\"$_member\",\"customStatus\":\"$_customStatus\"}")

	echo "Custom status for $_memberName set to:" $2
}

#
# Util
#

function getRelativeDate(){
	local interval=$(($(date +%s) - "$1"))

	local seconds=$(("$interval" % 60))
	local minutes=$((("$interval" / 60) % 60))
	local hours=$((("$interval" / 60 / 60) % 24))
	local days=$(("$interval" / 60 / 60 / 24))

	echo "${days}d ${hours}h ${minutes}m ${seconds}s"
}

function hexColor(){
	local r="$((16#${1:1:2}))"
	local g="$((16#${1:3:2}))"
	local b="$((16#${1:5:2}))"
	[ "$COLOR" == "1" ] && echo -e "\033[38;2;${r};${g};${b}m"
}

function resetColor(){
	[ "$COLOR" == "1" ] && echo -e "\033[m"
}

function getMe(){
	local _cached=$(getCachedMe)
	[ -n "$_cached" ] && echo "$_cached" && return

	local _netreq=$(req_get "me")
	[ -n "$_netreq" ] && saveCachedMe "$_netreq" && echo "$_netreq"
}

function getUser(){
	local _cached=$(getCachedUser $1)
	[ -n "$_cached" ] && echo "$_cached" && return

	local _netreq=$(req_get "user/$1")
	[ -n "$_netreq" ] && saveCachedUser "$1" "$_netreq" && echo "$_netreq"
}

function getMembers(){
	local _cached=$(getCachedMembers $1)
	[ -n "$_cached" ] && echo "$_cached" && return

	local _netreq=$(req_get "members/$1")
	[ -n "$_netreq" ] && saveCachedMembers "$1" "$_netreq" && echo "$_netreq"
}

function getCustomFronts(){
	local _cached=$(getCachedCustomFronts $1)
	[ -n "$_cached" ] && echo "$_cached" && return

	local _netreq=$(req_get "customFronts/$1")
	[ -n "$_netreq" ] && saveCachedCustomFronts "$1" "$_netreq" && echo "$_netreq"
}

function getCachedMe(){
	[ -f "$cachedir/me.json" ] && [ "$(($(date +%s) - $(date -r "$cachedir/me.json" +%s)))" -lt 86400 ] &&
	echo "$(<"$cachedir/me.json")"
}

function getCachedUser(){
	[ -f "$cachedir/user/$1.json" ] && [ "$(($(date +%s) - $(date -r "$cachedir/user/$1.json" +%s)))" -lt 86400 ] &&
	echo "$(<"$cachedir/user/$1.json")"
}

function getCachedMembers(){
	[ -f "$cachedir/members/$1.json" ] && [ "$(($(date +%s) - $(date -r "$cachedir/members/$1.json" +%s)))" -lt 86400 ] &&
	echo "$(<"$cachedir/members/$1.json")"
}

function getCachedCustomFronts(){
	[ -f "$cachedir/customFronts/$1.json" ] && [ "$(($(date +%s) - $(date -r "$cachedir/customFronts/$1.json" +%s)))" -lt 86400 ] &&
	echo "$(<"$cachedir/customFronts/$1.json")"
}

function saveCachedMe(){
	[ ! -d "$cachedir" ] && mkdir -p "$cachedir"
	echo "$1" > "$cachedir/me.json"
}

function saveCachedUser(){
	[ ! -d "$cachedir/user" ] && mkdir -p "$cachedir/user"
	echo "$2" > "$cachedir/user/$1.json"
}

function saveCachedMembers(){
	[ ! -d "$cachedir/members" ] && mkdir -p "$cachedir/members"
	echo "$2" > "$cachedir/members/$1.json"
}

function saveCachedCustomFronts(){
	[ ! -d "$cachedir/customFronts" ] && mkdir -p "$cachedir/customFronts"
 	echo "$2" > "$cachedir/customFronts/$1.json"
}

#
# Plumbing
#

case $1 in
	friends)
		if [ -n "${users[$2]}" ]; then
			getFriendFronters "${users[$2]}"
			exit 0
		fi
		getFriendFronters "$2"
		exit 0
		;;
	fronts)
		getFronting
		exit 0
		;;
	add)
		if [ -n "${members[$2]}" ]; then
			addFront "${members[$2]}"
			exit 0
		fi
		addFront "$2"
		exit 0
		;;
	remove)
		if [ -n "${members[$2]}" ]; then
			removeFront "${members[$2]}"
			exit 0
		fi
		removeFront "$2"
		exit 0
		;;
	set)
		if [ -n "${members[$2]}" ]; then
			setFront "${members[$2]}"
			exit 0
		fi
		setFront "$2"
		exit 0
		;;
	status)
		if [ -n "${members[$2]}" ]; then
			setCustomStatus "${members[$2]}" "$3"
			exit 0
		fi
		setCustomStatus "$2" "$3"
		exit 0
		;;
	help)
		echo "SPCLI Help"
		echo ""
		echo "- $0 help									Shows this message."
		echo ""
		echo "- $0 add <memberID>						Add someone to front."
		echo "- $0 remove <memberID>					Remove someone from front."
		echo "- $0 set <memberID>						Set someone as front."
		echo ""
		echo "- $0 status <memberID> <customStatus>		Update the custom status of a fronting member."
		echo ""
		echo "- $0 fronts								Show the current fronting members."
		echo ""
		echo "- $0 friends <userID>						Query the fronters on a friends' account."

		exit 0
		;;
	*)
		echo "Usage: $0 <help|add|remove|set|status|fronts|friends> [...arguments]"
		exit 1
		;;
esac
